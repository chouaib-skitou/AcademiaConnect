version: "3.8"

services:
  auth_service_db:
      image: postgres:latest
      container_name: auth_service_db
      environment:
        - POSTGRES_DB=auth_service_db
        - POSTGRES_USER=root
        - POSTGRES_PASSWORD=root
      ports:
        - "5432:5432"
      volumes:
        - db_data:/var/lib/postgresql/data
      networks:
        - app-network
        
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - app-network

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: "rootroot"
      MINIO_ROOT_PASSWORD: "rootroot"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - app-network

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 rootroot rootroot; do
        echo 'Waiting for MinIO...'
        sleep 3
      done &&
      mc mb myminio/worknest-bucket || true &&
      mc anonymous set public myminio/worknest-bucket &&
      echo 'MinIO initialization completed successfully'
      "
    networks:
      - app-network

  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: Dockerfile
    image: auth-service:latest
    ports:
      - "5000:8080"
    env_file:
      - ./.env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth_service_db:5432/auth_service_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    depends_on:
      - auth_service_db
      - mailhog
    networks:
      - app-network

  # course-service:
  #   build:
  #     context: ../services/course-service
  #     dockerfile: Dockerfile
  #   image: course-service:latest
  #   ports:
  #     - "5001:8080"

  # video-service:
  #   build:
  #     context: ../services/video-service
  #     dockerfile: Dockerfile
  #   image: video-service:latest
  #   ports:
  #     - "5002:8080"

  # quiz-service:
  #   build:
  #     context: ../services/quiz-service
  #     dockerfile: Dockerfile
  #   image: quiz-service:latest
  #   ports:
  #     - "5003:8080"

  # notification-service:
  #   build:
  #     context: ../services/notification-service
  #     dockerfile: Dockerfile
  #   image: notification-service:latest
  #   ports:
  #     - "5004:8080"

  # analytics-service:
  #   build:
  #     context: ../services/analytics-service
  #     dockerfile: Dockerfile
  #   image: analytics-service:latest
  #   ports:
  #     - "5004:8080"

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    image: my-angular-app:latest
    ports:
      - "4200:80"
    depends_on:
      - auth-service
      # - course-service
      # - video-service
      # - quiz-service
      # - notification-service
      # - analytics-service
    networks:
      - app-network
      
networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  db_test_data:
